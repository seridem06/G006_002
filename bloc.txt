=========================================
Manipulando contenido HTML con JavaScript
=========================================
Estás trabajando en la interacción entre HTML y JavaScript para hacer la interfaz de usuario más dinámica e interactiva. Sin embargo, te gustaría cambiar el título de tu aplicación de forma dinámica con JavaScript.

¿Qué código JavaScript usarías para cambiar el texto mostrado en el encabezado de tu página (elemento h1) a "Bienvenido al mundo dev"?
========================================================================================================================
let titulo = document.querySelector('h1')
titulo.innerHTML = 'Bienvenido al mundo dev'
========================================================================================================================
funcion onclick
========================================================================================================================
Después de completar el curso "Lógica de programación: explore funciones y listas" en Alura, fuiste invitado a participar en un proyecto desafiante para crear un nuevo producto llamado "Screen Match", que pretende ser una especie de "YouTube" de Alura. Tu papel es crear una función que active una alerta cuando una persona hace clic en un botón específico.

Teniendo en cuenta lo que se enseñó sobre la función onclick, ¿cuál es la forma correcta de crear esta funcionalidad, utilizándose de las buenas prácticas de escritura de las funciones?
========================================================================================================================
<button onclick="alertFunction()">Haz clic aquí</button>

function alertFunction() {
  alert("¡Hola, has hecho clic en el botón!");
}
========================================================================================================================
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

Para saber más: diferencias entre HTML, CSS y JS

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
========================================================================================================================
HTML, CSS y JavaScript (JS) son tres tecnologías fundamentales para el desarrollo web.

HTML (HyperText Markup Language) es el lenguaje de marcado utilizado para estructurar el contenido de una página web. Este lenguaje emplea etiquetas para definir la jerarquía de los elementos de una página. Originado en 1991 por Tim Berners-Lee, HTML es como el esqueleto de una página web: trabaja organizando el contenido, como títulos, párrafos, imágenes y enlaces, para que todo esté ordenado y en su lugar.

CSS (Cascading Style Sheets), creado en 1995, se destaca como un lenguaje de estilos. Separa la presentación de la estructura: es responsable de la presentación y estilización de los elementos, ya que permite controlar colores, fuentes, diseños y otros aspectos visuales. Es como vestir la estructura HTML con ropa elegante para que la página se vea exactamente como deseas.

JavaScript, por su parte, es el único lenguaje de programación de los tres. Es responsable de agregar interactividad y dinamismo a las páginas. Permite la creación de funcionalidades como animaciones, validaciones de formularios y actualizaciones de contenido en tiempo real.

El papel de cada una de estas tecnologías en la construcción de aplicaciones web, en resumen, es el siguiente: HTML estructura el contenido, CSS define el estilo y el diseño, y JavaScript agrega funcionalidades dinámicas.

Aprender estas tecnologías es crucial para cualquier persona interesada en el desarrollo web, ya que forman la base del entorno digital. Comprender HTML es necesario para estructurar y organizar el contenido de una página de manera semántica, lo que es vital para la accesibilidad, la indexación en motores de búsqueda y una experiencia consistente en diferentes dispositivos.

CSS permite a las personas desarrolladoras controlar el diseño y la apariencia de sus sitios web, lo que permite la creación de diseños atractivos y receptivos que se adaptan a diferentes tamaños de pantalla.

Por último, JavaScript nos capacita a crear experiencias interactivas y dinámicas, mejorando la usabilidad al ofrecer funcionalidades más avanzadas a los usuarios.

La competencia en HTML, CSS y JavaScript permite dar vida a ideas de manera creativa y funcional, lo que brinda a usuarios finales una experiencia atractiva e intuitiva.

Además, estas habilidades son altamente valoradas en el mercado laboral, ya que la demanda de desarrolladores web calificados es constante, dada la continua importancia de la presencia en línea para empresas y particulares. Por lo tanto, aprender y mejorar estas tecnologías es una inversión significativa para cualquiera que desee destacarse en el campo del desarrollo web.


__________  _______                                                 _______________

Tecnología	Función	                                                Ejemplos de Uso
__________  _______                                                 _______________

HTML	    Lenguaje de marcado para estructurar contenido.	        Título, Párrafo
CSS	        Lenguaje de estilos para presentación y estilización.	p { color: blue; } div { background: #f2f2f2; }
JavaScript	Lenguaje de programación para interactividad.	        function inicarJogo() { ... }


========================================================================================================================
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

Anatomía de una función

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
========================================================================================================================
La anatomía de una función en JavaScript está compuesta por diversas partes que definen su comportamiento. Es importante comprender estos elementos para crear funciones reutilizables y modularizar el código de manera eficiente.

Por lo tanto, conocer la estructura de las funciones en JavaScript es fundamental para dominar el lenguaje y desarrollar aplicaciones complejas de manera organizada y funcional.

Con base en lo que vimos en esta lección, analiza las siguientes afirmaciones y marca solo las opciones verdaderas sobre funciones.

Alternativa correta
Palabra clave function: Se utiliza para declarar una función en JavaScript.


Toda función en JavaScript se declara utilizando la palabra clave "function". Esta palabra clave se utiliza para crear una función.

Alternativa correta
Las funciones en JavaScript pueden tener un nombre.


Las funciones en JavaScript pueden tener un nombre. De hecho, es una práctica común dar un nombre descriptivo a las funciones para facilitar la lectura y comprensión del código. Estos nombres se utilizan para llamar a la función posteriormente o hacer referencia a ella dentro del propio código, lo que te permite reutilizar la función en diferentes partes del programa.

Alternativa correta
Paréntesis (): Después del nombre de la función (si lo hay), los paréntesis se usan para definir los parámetros de la función.


Los paréntesis en una función en JavaScript se utilizan para contener los argumentos que recibe la función, lo que permite pasar información a la función e influir en su comportamiento y resultados.


========================================================================================================================
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

Función que verifica números

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
========================================================================================================================
Eres un desarrollador de software que trabaja con JavaScript y necesitas crear una función que verifique si un número es positivo, negativo o cero. Tu tarea es implementar una función que reciba como parámetro un número entero y muestre un mensaje en la consola según las siguientes reglas:

Si el número es mayor que cero, el mensaje debe ser: "El número es positivo."
Si el número es menor que cero, el mensaje debe ser: "El número es negativo."
Si el número es igual a cero, el mensaje debe ser: "El número es cero."
Puedes utilizar la estructura de control if-else para verificar las condiciones y mostrar el mensaje correspondiente en la consola.

Analiza las siguientes alternativas y marca aquella que contiene el código que cumple con todas las reglas mencionadas anteriormente:

function verificarNumero(numero) {
  if (numero > 0) {
    console.log("El número es positivo.");
  } else if (numero < 0) {
    console.log("El número es negativo.");
  } else {
    console.log("El número es zero.");
  }
}

En este código, utilizamos la estructura de control if-else para verificar las tres posibilidades: si el número es mayor que cero, si es menor que cero o si es igual a cero. Dependiendo de la condición, la función imprime el mensaje correspondiente en la consola."



Resolución del desafío 2
Saber cómo usar funciones es uno de los conceptos fundamentales en la programación y el desarrollo de software. Las funciones desempeñan un papel crucial en la organización, modularización y reutilización del código.

Con eso en mente, hemos creado una lista de actividades (opcionales) centradas en la práctica para mejorar aún más tu experiencia de aprendizaje.

Sugestión de respuestas
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
1.Crear una función que muestra "¡Hola, mundo!" en la consola.
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

function mostrarHola() {
  console.log("¡Hola, mundo!");
}

mostrarHola();
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
2. Crear una función que recibe un nombre como parámetro y muestra "¡Hola, [nombre]!" en la consola.
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

function mostrarHolaNombre(nombre) {
  console.log(`¡Hola, ${nombre}!`);
}

mostrarHolaNombre("Alice");

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
3.Crear una función que recibe un número como parámetro y devuelve el doble de ese número.
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

function calcularDoble(numero) {
  return numero * 2;
}

let resultadoDoble = calcularDoble(5);
console.log(resultadoDoble);

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
4.Crear una función que recibe tres números como parámetros y devuelve su promedio.
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

function calcularPromedio(a, b, c) {
  return (a + b + c) / 3;
}

let promedio = calcularPromedio(4, 7, 10);
console.log(promedio);

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
5.Crear una función que recibe dos números como parámetros y devuelve el mayor de ellos.
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

function encontrarMayor(a, b) {
  return a > b ? a : b;
}

let numeroMayor = encontrarMayor(15, 9);
console.log(numeroMayor);

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
6.Crear una función que recibe un número como parámetro y devuelve el resultado de multiplicar ese número por sí mismo.
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
function cuadrado(numero) {
  return numero * numero;
}

let resultado = cuadrado(2);
console.log(resultado);



&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
 Calculadora de promedio y situación del alumno
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

Has sido contratado(a) para desarrollar una calculadora que calcula el promedio y así verificar la situación de aprobación de un estudiante en función de sus cuatro notas. El promedio requerido para aprobar es de mínimo 5. Tu tarea es implementar dos funciones en JavaScript:

calcularPromedio(nota1, nota2, nota3, nota4) => Esta función recibe las cuatro notas del estudiante como parámetros y devuelve el promedio calculado con base en esas notas.
verificarAprobacion(promedio) => Esta función recibe el promedio del estudiante como parámetro y devuelve "Aprobado" si el promedio es mayor o igual a 5, en caso contrario, devuelve "Reprobado".
Utiliza estos valores para las calificaciones:

let nota1 = 7;
let nota2 = 6;
let nota3 = 3;
let nota4 = 5;

function calcularPromedio(nota1, nota2, nota3, nota4){
        let promedio = (nota1 +  nota2 +  nota3 +  nota4)/4
}

function verificarAprobacion(promedio){
         return promedio >= 5 ? “Aprobado” : “Reprobado”;
}


&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
 Adapta Función
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

En nuestra clase anterior, exploramos la función 'reiniciarJuego' y aprendimos a organizar nuestro código utilizando comentarios para guiar nuestras acciones paso a paso. Ahora, te presentamos un desafío práctico para poner en práctica tus conocimientos sobre el uso de funciones y buenas prácticas de programación.

El siguiente código en JavaScript calcula el doble y el triple de un número proporcionado. Tu tarea consiste en seleccionar las opciones que sigan las mejores prácticas de programación y ayuden a mejorar la legibilidad y mantenibilidad del código.

function calcularDobleTriple(numero) {
  const doble = numero * 2;
  const triple = numero * 3;

  return `El doble de ${numero} es ${doble} y el triple es ${triple}.`;
}

const numero = 5;
const resultado = calcularDobleTriple(numero);
console.log(resultado);

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

function calcularDoble(numero) {
  return numero * 2;
}



function calcularTriple(numero) {
  return numero * 3;
}

const numero = 5;
const doble = calcularDoble(numero);
const triple = calcularTriple(numero);

console.log(`El doble de ${numero} es ${doble} y el triple es ${triple}.`);


$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Resolución del desafío 3
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

Desafíos:Saber cómo usar funciones es uno de los conceptos fundamentales en la programación y el desarrollo de software. Las funciones desempeñan un papel crucial en la organización, modularización y reutilización del código.

Con eso en mente, hemos creado una lista de actividades (opcionales) centradas en la práctica para mejorar aún más tu experiencia de aprendizaje.

Sugestión de respuestas
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1.Crea una función que calcule el índice de masa corporal (IMC) de una persona a partir de su altura en metros y peso en kilogramos, que se recibirán como parámetros.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

function calcularIMC(altura, peso) {
  var imc = peso / (altura * altura);
  return imc;
}

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
2.Crea una función que calcule el valor del factorial de un número pasado como parámetro.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

function calcularFactorial(numero) {
  if (numero === 0 || numero === 1) {
    return 1;
  } else {
    return numero * calcularFactorial(numero - 1);
  }
}
// Ejemplo de uso
let numero = 5;
let resultado = calcularFactorial(numero);
console.log(`El factorial de ${numero} es ${resultado}`);

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
3.Crea una función que convierta un valor en dólares, pasado como parámetro, y devuelva el valor equivalente en reales. Para esto, considera la cotización del dólar igual a R$4,80.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

function convertirDolaresAReales(dolares) {
  var cotizacionDolar = 4.80;
  var reales = dolares * cotizacionDolar;
  return reales;
}
// Ejemplo de uso
let valorEnDolar = 50;
let valorEnReales = convertirDolaresAReales(valorEnDolar);
console.log(`${valorEnDolar} dólares  es R$ ${valorEnReales}`);

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
4.Crea una función que muestre en pantalla el área y el perímetro de una sala rectangular, utilizando la altura y la anchura que se proporcionarán como parámetros.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

function calcularAreaYPerimetroRectangular(altura, anchura) {
  var area = altura * anchura;
  var perimetro = 2 * (altura + anchura);
  console.log("Área: " + area);
  console.log("Perímetro: " + perimetro);
}
// Ejemplo de uso
let altura = 3; // en metros
let anchura = 5; // en metros
calcularAreaYPerimetroRectangular(altura, anchura);

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
5.Crea una función que muestre en pantalla el área y el perímetro de una sala circular, utilizando su radio que se proporcionará como parámetro. Considera Pi = 3,14.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

function calcularAreaYPerimetroCircular(radio) {
  var pi = 3.14;
  var area = pi * radio * radio;
  var perimetro = 2 * pi * radio;
  console.log("Área: " + area);
  console.log("Perímetro: " + perimetro);
}
// Ejemplo de uso
let radio = 4; // en metros
calcularAreaYPerimetroCircular(radio);

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
6.Crea una función que muestre en pantalla la tabla de multiplicar de un número dado como parámetro.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

function mostrarTablaDeMultiplicar(numero) {
  for (var i = 1; i <= 10; i++) {
    var resultado = numero * i;
    console.log(numero + " x " + i + " = " + resultado);
  }
}
// Ejemplo de uso
let numero = 7;
mostrarTablaDeMultiplicar(numero);

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Manipulación de  lista en JS
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

Has sido encargado(a) de crear un pequeño programa para gestionar una lista de compras. El programa debe permitir que el usuario agregue elementos a la lista y luego mostrar el contenido de la lista en la pantalla. Además, el usuario debe poder ver un elemento específico de la lista ingresando el índice del elemento deseado.

let listaCompras = [];

listaCompras.push("Manzana");
listaCompras.push("Arroz");
listaCompras.push("Leche");
listaCompras.push("Pan");
listaCompras.push("Carne");


listaCompras.length muestra la cantidad de elementos de una lista.


La propiedad "length" se utiliza para obtener la cantidad de elementos en una lista o array en JavaScript.

Alternativa correta
El código listaCompras[3] mostrará el elemento Pan.


El código listaCompras[3] en realidad mostrará el elemento "Pan", ya que el índice 0 corresponde a "Manzana", 1 a "Arroz", 2 a "Leche" y 3 a "Pan".

¡Enhorabuena, has acertado!
################################################################################################################
Para saber más: ¿Vamos a leer más sobre listas?

PRÓXIMA ACTIVIDAD

Un array, arreglo o lista en JavaScript es una estructura de datos que permite almacenar y organizar múltiples valores en una sola variable. Los valores en un array pueden ser de cualquier tipo de dato, como números, strings, objetos, otros arrays, y así sucesivamente. Los arrays en JavaScript son indexados, lo que significa que cada valor dentro de ellos está asociado con un índice numérico, generalmente comenzando desde el índice 0.

Creando un array
Puedes crear un array en JavaScript declarando una variable y asignándole valores entre corchetes [].

let frutas = ["Manzana", "Uva", "Naranja"];
COPIA EL CÓDIGO
Accediendo a los valores Los elementos de un array se acceden mediante índices numéricos, que comienzan en 0.

Índice	Elemento
0	"Manzana"
1	"Uva"
2	"Naranja"
console.log(frutas[0]); // Salida: "Manzana"
console.log(frutas[2]); // Salida: "Naranja"
COPIA EL CÓDIGO
Añadiendo nuevos elementos
Para agregar un elemento al final del array, puedes usar el método push.

frutas.push("Fresa");
console.log(frutas); // Salida: ["Manzana", "Uva", "Naranja", "Fresa"]
COPIA EL CÓDIGO
Eliminando el último elemento
Para eliminar el último elemento, puedes usar el método pop.

frutas.pop();
console.log(frutas); // Salida: ["Manzana", "Uva", "Naranja"]
COPIA EL CÓDIGO
¿Qué lenguajes de programación utilizan arrays?
Aquí tienes una lista de algunos lenguajes de programación que utilizan arrays:

JavaScript
Python
Java
C++
C#
Ruby
PHP
Swift
Kotlin
Go
Otros lenguajes también admiten el uso de arrays o estructuras de datos similares para almacenar colecciones de valores. Aprender sobre arrays es importante porque desempeñan un papel fundamental en el desarrollo de aplicaciones de software.

Las listas o arrays proporcionan una manera eficiente de almacenar y acceder a conjuntos de datos, lo que permite a los programadores organizar la información de manera lógica y manipular estos datos de manera efectiva.

Con el conocimiento de cómo trabajar con arrays, es posible crear algoritmos más poderosos, resolver problemas de programación de manera más eficiente y crear aplicaciones más dinámicas e interactivas.

 DISCUTIR 
